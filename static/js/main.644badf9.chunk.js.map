{"version":3,"sources":["components/FrequencyTable.js","components/FiveNumberSummary.js","App.js","reportWebVitals.js","index.js"],"names":["FrequencyTable","Component","props","handleChange1","e","setState","dataList","target","value","disabled","handleChange2","frequencyList","frequencyListArrayCreate","a","temp","Array","total","state","split","parseFloat","frequencyListArray","totalFrequency","dataListarrayCreate","dataListArray","totalData","getMean","top","i","length","mean","getVariance","console","log","sampleVariance","populationVariance","submitHandler","preventDefault","className","type","id","onChange","this","onClick","class","scope","map","x","Math","sqrt","Stat","handleChange","dataSet","disabled1","setArray","sort","b","dataList1","calculateMeanTotalVarianceSD","sampleSD","populationSD","getDecimal","n","floor","getWhole","quartile","q_1_place","q_2_place","q_3_place","q_1_decimal","q_1_whole","q_2_decimal","q_2_whole","q_3_decimal","q_3_whole","Q1","Q2","Q3","skewness","upperBound","lowerBound","getOutliers","outliers","slice","maxMinRange","newMin","newMax","max","min","range","getList","list","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.644badf9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class FrequencyTable extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            dataList: '',\r\n            frequencyList: '',\r\n            dataListArray: [],\r\n            frequencyListArray: [],\r\n            totalFrequency: 0,\r\n            totalData: 0,\r\n            mean: 0,\r\n            sampleVariance: 0,\r\n            populationVariance: 0\r\n\r\n        }\r\n    }\r\n\r\n    handleChange1 = (e) =>{\r\n        this.setState({\r\n            dataList: e.target.value,\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    handleChange2 = (e) =>{\r\n        this.setState({\r\n            frequencyList: e.target.value,\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    frequencyListArrayCreate = async () => {\r\n        let temp = new Array();\r\n        let total = 0;\r\n\r\n        temp = this.state.frequencyList.split(\",\");\r\n\r\n        for (var a in temp) {\r\n            temp[a] =  parseFloat(temp[a]);\r\n            total = total + temp[a];\r\n        }\r\n\r\n        this.setState({\r\n            frequencyListArray: temp,\r\n            totalFrequency: total\r\n          });\r\n    }\r\n\r\n    dataListarrayCreate = async () => {\r\n        let temp = new Array();\r\n        let total = 0;\r\n\r\n        temp = this.state.dataList.split(\",\");\r\n\r\n        for (var a in temp) {\r\n            temp[a] =  parseFloat(temp[a])\r\n            total = total + temp[a]\r\n        }\r\n\r\n        this.setState({\r\n            dataListArray: temp,\r\n            totalData: total\r\n          });\r\n    }\r\n\r\n    getMean = async () => {\r\n        await this.dataListarrayCreate();\r\n        await this.frequencyListArrayCreate();\r\n\r\n        let top = 0;\r\n        let mean = 0;\r\n\r\n        for(let i = 0; i < this.state.dataListArray.length; i++){\r\n            top += (this.state.dataListArray[i]*this.state.frequencyListArray[i]);\r\n        }\r\n\r\n        mean = top/this.state.totalFrequency;\r\n\r\n        this.setState({\r\n            mean: mean\r\n        })\r\n\r\n        return mean;\r\n    }\r\n\r\n    getVariance = async () => {\r\n        let mean = await this.getMean();\r\n        let top = 0;\r\n        let totalFrequency = this.state.totalFrequency;\r\n\r\n        for(let i = 0; i < this.state.dataListArray.length; i++){\r\n            top += ((this.state.dataListArray[i] - mean)*(this.state.dataListArray[i] - mean))*this.state.frequencyListArray[i];\r\n        }\r\n\r\n        console.log(top)\r\n\r\n        let sampleVariance = top/(totalFrequency-1);\r\n        let populationVariance = top/(totalFrequency);\r\n\r\n        this.setState({\r\n            sampleVariance: sampleVariance,\r\n            populationVariance: populationVariance\r\n        })\r\n    }\r\n\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n        this.dataListarrayCreate();\r\n        this.frequencyListArrayCreate();\r\n        this.getVariance();\r\n\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"container\">\r\n                    <h4>For Frequency Table</h4>\r\n                    <hr/>\r\n                    <d1 className=\"row\">\r\n                    <form>\r\n                    <p>Type your data list and frequency list inside relevant input fields respectively, separated with commas. Dont put spaces </p>\r\n                        <p>eg: data list - <i>1,2,3,4,5   </i>\r\n                        frequency list -  <i>6,7,8,9,10</i></p>\r\n                        <dd className=\"col-sm-3\">Input data list:</dd>\r\n                        <dd className=\"col-sm-9\"><input type='text' id='dataList' onChange={this.handleChange1}/></dd>\r\n\r\n                        <dd className=\"col-sm-3\">Input frequency list:</dd>\r\n                        <dd className=\"col-sm-9\"><input type='text' id='frequencyList' onChange={this.handleChange2}/></dd>\r\n                        \r\n                        <button className='btn btn-success' disabled={this.state.disabled} onClick={this.submitHandler}>Get Answers</button>\r\n                        <br/>\r\n                        <br/>\r\n\r\n                        <table class=\"table table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                <th scope=\"col\">x</th>\r\n                                <th scope=\"col\">frequency</th>\r\n                                <th scope=\"col\">fx</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                  \r\n                                {this.state.dataListArray.map((x, i) => (\r\n\r\n                                        <tr key={i}>\r\n                                        <td scope=\"row\">{x}</td>\r\n                                        <td scope=\"row\">{this.state.frequencyListArray[i]}</td>\r\n                                        <th scope=\"row\">{this.state.frequencyListArray[i]*x}</th>\r\n                                        </tr>\r\n                                      \r\n                                  ))} \r\n                                        <tr>\r\n                                        <th scope=\"row\">Σ(x) = {this.state.totalData}</th>\r\n                                        <th scope=\"row\">Σ(f) = {this.state.totalFrequency}</th>\r\n                                        <th scope=\"row\">Σ(fx) = {this.state.totalFrequency*this.state.totalData}</th>\r\n                                        </tr>   \r\n\r\n                            </tbody>\r\n                            </table>\r\n\r\n                        <dt className=\"col-sm-3\">Mean</dt>\r\n                        <dd className=\"col-sm-9\">Σ(fx)/Σ(f) = {this.state.mean}</dd>\r\n                        <br/>\r\n                        <p>If the question does not mention if sample or population, GET SAMPLE VALUES. DEFAULT IS SAMPLE</p>\r\n                        <h3>IF DATA SET IS SAMPLE</h3>\r\n                        <dt className=\"col-sm-3\">Variance</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.sampleVariance}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Standerd deviation</dt>\r\n                        <dd className=\"col-sm-9\">{Math.sqrt(this.state.sampleVariance)}</dd>\r\n                        <br/>\r\n                        \r\n                        <h3>IF DATA SET IS POPULATION</h3>\r\n                        <dt className=\"col-sm-3\">Variance</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.populationVariance}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Standerd deviation</dt>\r\n                        <dd className=\"col-sm-9\">{Math.sqrt(this.state.populationVariance)}</dd>\r\n\r\n                    </form>\r\n                    </d1>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class fiveNumberSummary extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state={\r\n            max: 0,\r\n            min: 0,\r\n            range: 0,\r\n            Q1: 0,\r\n            Q2: 0,\r\n            Q3: 0,\r\n            Array1: [],\r\n            upperBound: 0,\r\n            lowerBound: 0,\r\n            skewness: '',\r\n            mean: 0,\r\n            variance: 0,\r\n            standard_deviation: 0\r\n\r\n        }\r\n    }\r\n\r\n\r\n    getArray() {\r\n        let Array1 = this.state.dataList;\r\n\r\n        for (var a in Array1) {\r\n            Array1[a] = Array1[a] + \", \";\r\n        }\r\n\r\n        this.setState({\r\n            Array1: Array1,\r\n        })\r\n    }\r\n\r\n    getStats= (e) =>{\r\n        e.preventDefault();\r\n        this.quartile();\r\n        this.maxMinRange();\r\n        this.getArray();\r\n    }\r\n\r\n    getDecimal = (n) => {\r\n        return (n - Math.floor(n));\r\n    }\r\n\r\n    getWhole = (n) => {\r\n        return (n - this.getDecimal(n));\r\n    }\r\n\r\n    quartile = () => {\r\n        let q_1_place = (this.state.dataList.length + 1)/4;\r\n        let q_2_place = (this.state.dataList.length + 1)/2;\r\n        let q_3_place = ((this.state.dataList.length + 1)*3)/4;\r\n\r\n        let q_1_decimal = this.getDecimal(q_1_place);\r\n        let q_1_whole = this.getWhole(q_1_place);\r\n\r\n        let q_2_decimal = this.getDecimal(q_2_place);\r\n        let q_2_whole = this.getWhole(q_2_place);\r\n\r\n        let q_3_decimal = this.getDecimal(q_3_place);\r\n        let q_3_whole = this.getWhole(q_3_place);\r\n        \r\n        let Q1,Q2,Q3;\r\n\r\n        if(this.state.dataList.length%2==0){\r\n            Q1 = this.state.dataList[q_1_whole - 1] + (q_1_decimal * (this.state.dataList[q_1_whole] - this.state.dataList[q_1_whole - 1]));\r\n            Q2 = this.state.dataList[q_2_whole - 1] + (q_2_decimal * (this.state.dataList[q_2_whole] - this.state.dataList[q_2_whole - 1]));\r\n            Q3 = this.state.dataList[q_3_whole - 1] + (q_3_decimal * (this.state.dataList[q_3_whole] - this.state.dataList[q_3_whole - 1]));\r\n        } else {\r\n            Q1 = this.state.dataList[q_1_whole - 1];\r\n            Q2 = this.state.dataList[q_2_whole - 1];\r\n            Q3 = this.state.dataList[q_3_whole - 1];\r\n        }\r\n\r\n        let skewness \r\n\r\n        if((Q3 - Q2) > (Q2 - Q1)) {\r\n            skewness = 'Positive skewed (right skewed distribution)'\r\n        } else if ((Q3 - Q2) < (Q2 - Q1)) {\r\n            skewness = 'Negative skewed (left skewed distribution)'\r\n        } else{\r\n            skewness = 'Symmetric distribution'\r\n        }\r\n\r\n        this.setState({\r\n            Q1: Q1,\r\n            Q2: Q2,\r\n            Q3: Q3,\r\n            upperBound: Q3 + 1.5*(Q3-Q1),\r\n            lowerBound: Q1 - 1.5*(Q3-Q1),\r\n            skewness: skewness\r\n            \r\n        })\r\n    }\r\n\r\n    maxMinRange = () => {\r\n        \r\n        let newMin = this.state.dataList[0];\r\n        let newMax = this.state.dataList[0];\r\n\r\n        for ( let i = 0; i < this.state.dataList.length; i++ ) {\r\n\r\n            if(newMin > this.state.dataList[i]) {\r\n                newMin = this.state.dataList[i];\r\n            }\r\n            if(newMax < this.state.dataList[i]) {\r\n                newMax = this.state.dataList[i];\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            max: newMax,\r\n            min: newMin,\r\n            range: newMax - newMin\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n                <div style={{marginTop:'20px'}} className=\"container\">\r\n                    <button className='btn btn-success' onClick={this.getStats}>Get stats</button>\r\n                    <h4>Five number summary</h4>\r\n                        <hr/>\r\n                        <d1 className=\"row\">\r\n                        <dt className=\"col-sm-3\">Data set in ascending order</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.Array1}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Max</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.max}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Min</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.min}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Range</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.range}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Total</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.total}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Mean</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.mean}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Variance</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.variance}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Standerd deviation</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.standard_deviation}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Q1</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.Q1}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Q2</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.Q2}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Q3</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.Q3}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">IQR (Q3 - Q1)</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.Q3 - this.state.Q1}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Upper bound</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.upperBound}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Lower bound</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.lowerBound}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Skeweness</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.skewness}</dd>\r\n\r\n                </d1>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport FiveNumberSummary from './components/FiveNumberSummary';\nimport FrequencyTable from './components/FrequencyTable';\n\n\nclass Stat extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = { \n            disabled1: false,\n            dataSet: '',\n            dataList: [], //sorted list\n            total: 0,\n            mean: 0,\n            populationSD: 0,\n            sampleSD: 0,\n            sampleVariance: 0,\n            populationVariance: 0,\n            Q1: 0,\n            Q2: 0,\n            Q3: 0,\n            upperBound: 0,\n            lowerBound: 0,\n            skewness: '0',\n            min: 0,\n            max: 0,\n            range: 0,\n            outliers: '0',\n            list: '0'\n\n        }\n    }\n\n    handleChange = (e) => {    \n        this.setState({dataSet: e.target.value, disabled1: false});  \n    }\n\n    setArray = () => {\n        let temp = new Array();\n\n        temp = this.state.dataSet.split(\",\");\n        let total = 0;\n\n        for (var a in temp) {\n            temp[a] =  parseFloat(temp[a])\n            total = total + temp[a]\n        }\n\n        temp.sort((a, b) => a - b);\n\n        this.setState({\n            dataList: temp,\n            dataList1: temp,\n            total: total\n          });\n    }\n\n    calculateMeanTotalVarianceSD = async () => {\n        \n        await this.setArray();\n\n        let temp = this.state.dataList\n        let total = this.state.total;\n        let mean = 0;\n        let top = 0;\n\n        for (var a in temp) {\n            top = top + ((temp[a] -  total/temp.length)*(temp[a] -  total/temp.length));\n        }\n\n        mean = total/temp.length;\n        let sampleVariance = top/(temp.length-1);\n        let populationVariance = top/(temp.length);\n        let sampleSD = Math.sqrt(top/(temp.length-1));\n        let populationSD = Math.sqrt(top/(temp.length));\n\n\n\n        this.setState({\n            total: total,\n            mean: mean,\n            populationVariance: populationVariance,\n            sampleVariance: sampleVariance,\n            sampleSD: sampleSD,\n            populationSD: populationSD\n          });\n    }\n\n    getDecimal = (n) => {\n        return (n - Math.floor(n));\n    }\n\n    getWhole = (n) => {\n        return (n - this.getDecimal(n));\n    }\n\n    quartile = async () => {\n\n        await this.calculateMeanTotalVarianceSD();\n\n        let q_1_place;\n        let q_2_place;\n        let q_3_place;\n\n        q_1_place = (this.state.dataList.length + 1)/4;\n        q_2_place = (this.state.dataList.length + 1)/2;\n        q_3_place = ((this.state.dataList.length + 1)*3)/4;\n        \n        let q_1_decimal = this.getDecimal(q_1_place);\n        let q_1_whole = this.getWhole(q_1_place);\n\n        let q_2_decimal = this.getDecimal(q_2_place);\n        let q_2_whole = this.getWhole(q_2_place);\n        let q_3_decimal = this.getDecimal(q_3_place);\n        let q_3_whole = this.getWhole(q_3_place);\n        \n        let Q1,Q2,Q3;\n\n            Q1 = this.state.dataList[q_1_whole - 1] + (q_1_decimal * (this.state.dataList[q_1_whole] - this.state.dataList[q_1_whole - 1]));\n            Q2 = this.state.dataList[q_2_whole - 1] + (q_2_decimal * (this.state.dataList[q_2_whole] - this.state.dataList[q_2_whole - 1]));\n            Q3 = this.state.dataList[q_3_whole - 1] + (q_3_decimal * (this.state.dataList[q_3_whole] - this.state.dataList[q_3_whole - 1]));\n\n        let skewness \n\n        if((Q3 - Q2) > (Q2 - Q1)) {\n            skewness = 'Positive skewed (right skewed distribution)'\n        } else if ((Q3 - Q2) < (Q2 - Q1)) {\n            skewness = 'Negative skewed (left skewed distribution)'\n        } else{\n            skewness = 'Symmetric distribution'\n        }\n\n        this.setState({\n            Q1: Q1,\n            Q2: Q2,\n            Q3: Q3,\n            upperBound: Q3 + 1.5*(Q3-Q1),\n            lowerBound: Q1 - 1.5*(Q3-Q1),\n            skewness: skewness\n            \n        })\n    }\n\n    getOutliers = async () => {\n        await this.quartile();\n        \n        let outliers = '';\n\n        for (let i = 0; i < this.state.dataList.length; i++){\n            if (this.state.lowerBound > this.state.dataList[i]){\n                outliers = outliers + this.state.dataList[i] + ', '\n            } \n            if (this.state.upperBound < this.state.dataList[i]){\n                outliers = outliers + this.state.dataList[i] + ', '\n            } \n        }\n        if(outliers == '') {\n            outliers = 'No outliers'\n        } else {\n            outliers = outliers.slice(0, -1);\n            outliers = outliers.slice(0, -1);\n        }\n\n        this.setState({\n            outliers: outliers\n        })\n    }\n\n    maxMinRange = async () => {\n\n        await this.getOutliers();\n        \n        let newMin = this.state.dataList[0];\n        let newMax = this.state.dataList[0];\n\n        for ( let i = 0; i < this.state.dataList.length; i++ ) {\n\n            if(newMin > this.state.dataList[i]) {\n                newMin = this.state.dataList[i];\n            }\n            if(newMax < this.state.dataList[i]) {\n                newMax = this.state.dataList[i];\n            }\n        }\n\n        this.setState({\n            max: newMax,\n            min: newMin,\n            range: newMax - newMin\n        })\n    }\n\n    getList = async () => {\n        await this.maxMinRange();\n\n        let list = '';\n\n        for (let i = 0; i < this.state.dataList.length; i++){\n            list = list + this.state.dataList[i] + ', ';\n        }\n\n        list = list.slice(0, -1);\n        list = list.slice(0, -1);\n\n        this.setState({\n            list: list\n        })\n    }\n\n\n    submitHandler = (e) => {\n        e.preventDefault();\n        this.getList();\n\n        this.setState({\n            disabled1: true\n        })\n    }\n\n    render() { \n        return ( \n            <div className=\"container\">\n\n                <p><b>NOTE: </b>All the calculations are done using the formulas we were taught in lectures. Good luck with your mid-exam! <br/><i>work by - <a href=\"https://shehanx86.github.io/\">Shehan bossa</a></i></p>\n\n                       <h4>For Data Lists</h4>\n                    <hr/>\n                    <d1 className=\"row\">\n                    <form>\n                    <p>Type your data set separated with commas. Dont put spaces </p>\n                        <p>eg: <i>12,25,14,2,4 </i>\n                        or <i>12.54,25,1.4,2,4.78</i></p>\n                        <dd className=\"col-sm-3\">Input data set:</dd>\n                        <dd className=\"col-sm-9\"><input type='text' id='dataSet' onChange={this.handleChange}/></dd>\n        \n                        <button className='btn btn-success' disabled={this.state.disabled1} onClick={this.submitHandler}>Get Answers</button>\n                        <br/>\n                        <br/>\n\n                        <dd className=\"col-sm-3\">Your date set in ascending order</dd>\n                        <dd className=\"col-sm-9\">{this.state.list}</dd>\n\n                        <dt className=\"col-sm-3\">Max</dt>\n                        <dd className=\"col-sm-9\">{this.state.max}</dd>\n\n                        <dt className=\"col-sm-3\">Min</dt>\n                        <dd className=\"col-sm-9\">{this.state.min}</dd>\n\n                        <dt className=\"col-sm-3\">Range</dt>\n                        <dd className=\"col-sm-9\">{this.state.range}</dd>\n\n                        <dt className=\"col-sm-3\">Total</dt>\n                        <dd className=\"col-sm-9\">{this.state.total}</dd>\n\n                        <dt className=\"col-sm-3\">Mean</dt>\n                        <dd className=\"col-sm-9\">{this.state.mean}</dd>\n\n                        <dt className=\"col-sm-3\">Q1</dt>\n                        <dd className=\"col-sm-9\">{this.state.Q1}</dd>\n\n                        <dt className=\"col-sm-3\">Q2 (Median)</dt>\n                        <dd className=\"col-sm-9\">{this.state.Q2}</dd>\n\n                        <dt className=\"col-sm-3\">Q3</dt>\n                        <dd className=\"col-sm-9\">{this.state.Q3}</dd>\n\n                        <dt className=\"col-sm-3\">IQR (Q3 - Q1)</dt>\n                        <dd className=\"col-sm-9\">{this.state.Q3 - this.state.Q1}</dd>\n\n                        <dt className=\"col-sm-3\">Upper bound</dt>\n                        <dd className=\"col-sm-9\">{this.state.upperBound}</dd>\n\n                        <dt className=\"col-sm-3\">Lower bound</dt>\n                        <dd className=\"col-sm-9\">{this.state.lowerBound}</dd>\n\n                        <dt className=\"col-sm-3\">Outliers</dt>\n                        <dd className=\"col-sm-9\">{this.state.outliers}</dd>\n\n                        <dt className=\"col-sm-3\">Skeweness</dt>\n                        <dd className=\"col-sm-9\">{this.state.skewness}</dd>\n\n                        <dt className=\"col-sm-3\">Variance (SAMPLE)</dt>\n                        <dd className=\"col-sm-9\">{this.state.sampleVariance}</dd>\n\n                        <dt className=\"col-sm-3\">Standerd deviation (SAMPLE)</dt>\n                        <dd className=\"col-sm-9\">{Math.sqrt(this.state.sampleVariance)}</dd>\n\n                        <dt className=\"col-sm-3\">Variance (POPULATION)</dt>\n                        <dd className=\"col-sm-9\">{this.state.populationVariance}</dd>\n\n                        <dt className=\"col-sm-3\">Standerd deviation (POPULATION)</dt>\n                        <dd className=\"col-sm-9\">{Math.sqrt(this.state.populationVariance)}</dd>\n\n\n                    </form>\n                    </d1>\n\n            </div>\n         );\n    }\n}\n \nexport default Stat;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport FrequencyTable from './components/FrequencyTable';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n    <br/>\n    <FrequencyTable/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}