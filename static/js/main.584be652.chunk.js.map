{"version":3,"sources":["App.js","components/FrequencyTable.js","reportWebVitals.js","index.js"],"names":["Stat","props","handleChange","e","setState","dataSet","target","value","disabled1","setArray","temp","Array","state","split","total","a","parseFloat","sort","b","dataList","dataList1","calculateMeanTotalVarianceSD","top","length","mean","sampleVariance","populationVariance","sampleSD","Math","sqrt","populationSD","getDecimal","n","floor","getWhole","quartile","q_1_place","q_2_place","q_3_place","q_1_decimal","q_1_whole","q_2_decimal","q_2_whole","q_3_decimal","q_3_whole","Q1","Q2","Q3","skewness","upperBound","lowerBound","getOutliers","outliers","i","slice","maxMinRange","newMin","newMax","max","min","range","getList","list","submitHandler","preventDefault","className","href","type","id","onChange","this","disabled","onClick","Component","FrequencyTable","handleChange1","handleChange2","frequencyList","frequencyListArrayCreate","frequencyListArray","totalFrequency","dataListarrayCreate","dataListArray","totalData","getMean","totalfx","fx","getVariance","console","log","class","scope","map","x","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.584be652.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Stat extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = { \n            disabled1: false,\n            dataSet: '',\n            dataList: [], //sorted list\n            total: 0,\n            mean: 0,\n            populationSD: 0,\n            sampleSD: 0,\n            sampleVariance: 0,\n            populationVariance: 0,\n            Q1: 0,\n            Q2: 0,\n            Q3: 0,\n            upperBound: 0,\n            lowerBound: 0,\n            skewness: '0',\n            min: 0,\n            max: 0,\n            range: 0,\n            outliers: '0',\n            list: '0'\n\n        }\n    }\n\n    handleChange = (e) => {    \n        this.setState({dataSet: e.target.value, disabled1: false});  \n    }\n\n    setArray = () => {\n        let temp = new Array();\n\n        temp = this.state.dataSet.split(\",\");\n        let total = 0;\n\n        for (var a in temp) {\n            temp[a] =  parseFloat(temp[a])\n            total = total + temp[a]\n        }\n\n        temp.sort((a, b) => a - b);\n\n        this.setState({\n            dataList: temp,\n            dataList1: temp,\n            total: total\n          });\n    }\n\n    calculateMeanTotalVarianceSD = async () => {\n        \n        await this.setArray();\n\n        let temp = this.state.dataList\n        let total = this.state.total;\n        let mean = 0;\n        let top = 0;\n\n        for (var a in temp) {\n            top = top + ((temp[a] -  total/temp.length)*(temp[a] -  total/temp.length));\n        }\n\n        mean = total/temp.length;\n        let sampleVariance = top/(temp.length-1);\n        let populationVariance = top/(temp.length);\n        let sampleSD = Math.sqrt(top/(temp.length-1));\n        let populationSD = Math.sqrt(top/(temp.length));\n\n\n\n        this.setState({\n            total: total,\n            mean: mean,\n            populationVariance: populationVariance,\n            sampleVariance: sampleVariance,\n            sampleSD: sampleSD,\n            populationSD: populationSD\n          });\n    }\n\n    getDecimal = (n) => {\n        return (n - Math.floor(n));\n    }\n\n    getWhole = (n) => {\n        return (n - this.getDecimal(n));\n    }\n\n    quartile = async () => {\n\n        await this.calculateMeanTotalVarianceSD();\n\n        let q_1_place;\n        let q_2_place;\n        let q_3_place;\n\n        q_1_place = (this.state.dataList.length + 1)/4;\n        q_2_place = (this.state.dataList.length + 1)/2;\n        q_3_place = ((this.state.dataList.length + 1)*3)/4;\n        \n        let q_1_decimal = this.getDecimal(q_1_place);\n        let q_1_whole = this.getWhole(q_1_place);\n\n        let q_2_decimal = this.getDecimal(q_2_place);\n        let q_2_whole = this.getWhole(q_2_place);\n        let q_3_decimal = this.getDecimal(q_3_place);\n        let q_3_whole = this.getWhole(q_3_place);\n        \n        let Q1,Q2,Q3;\n\n            Q1 = this.state.dataList[q_1_whole - 1] + (q_1_decimal * (this.state.dataList[q_1_whole] - this.state.dataList[q_1_whole - 1]));\n            Q2 = this.state.dataList[q_2_whole - 1] + (q_2_decimal * (this.state.dataList[q_2_whole] - this.state.dataList[q_2_whole - 1]));\n            Q3 = this.state.dataList[q_3_whole - 1] + (q_3_decimal * (this.state.dataList[q_3_whole] - this.state.dataList[q_3_whole - 1]));\n\n        let skewness \n\n        if((Q3 - Q2) > (Q2 - Q1)) {\n            skewness = 'Positive skewed (right skewed distribution)'\n        } else if ((Q3 - Q2) < (Q2 - Q1)) {\n            skewness = 'Negative skewed (left skewed distribution)'\n        } else{\n            skewness = 'Symmetric distribution'\n        }\n\n        this.setState({\n            Q1: Q1,\n            Q2: Q2,\n            Q3: Q3,\n            upperBound: Q3 + 1.5*(Q3-Q1),\n            lowerBound: Q1 - 1.5*(Q3-Q1),\n            skewness: skewness\n            \n        })\n    }\n\n    getOutliers = async () => {\n        await this.quartile();\n        \n        let outliers = '';\n\n        for (let i = 0; i < this.state.dataList.length; i++){\n            if (this.state.lowerBound > this.state.dataList[i]){\n                outliers = outliers + this.state.dataList[i] + ', '\n            } \n            if (this.state.upperBound < this.state.dataList[i]){\n                outliers = outliers + this.state.dataList[i] + ', '\n            } \n        }\n        if(outliers == '') {\n            outliers = 'No outliers'\n        } else {\n            outliers = outliers.slice(0, -1);\n            outliers = outliers.slice(0, -1);\n        }\n\n        this.setState({\n            outliers: outliers\n        })\n    }\n\n    maxMinRange = async () => {\n\n        await this.getOutliers();\n        \n        let newMin = this.state.dataList[0];\n        let newMax = this.state.dataList[0];\n\n        for ( let i = 0; i < this.state.dataList.length; i++ ) {\n\n            if(newMin > this.state.dataList[i]) {\n                newMin = this.state.dataList[i];\n            }\n            if(newMax < this.state.dataList[i]) {\n                newMax = this.state.dataList[i];\n            }\n        }\n\n        this.setState({\n            max: newMax,\n            min: newMin,\n            range: newMax - newMin\n        })\n    }\n\n    getList = async () => {\n        await this.maxMinRange();\n\n        let list = '';\n\n        for (let i = 0; i < this.state.dataList.length; i++){\n            list = list + this.state.dataList[i] + ', ';\n        }\n\n        list = list.slice(0, -1);\n        list = list.slice(0, -1);\n\n        this.setState({\n            list: list\n        })\n    }\n\n\n    submitHandler = (e) => {\n        e.preventDefault();\n        this.getList();\n\n        this.setState({\n            disabled1: true\n        })\n    }\n\n    render() { \n        return ( \n            <div className=\"container\">\n\n                <p><b>NOTE: </b>All the calculations are done using the formulas we were taught in lectures. Good luck with your mid-exam! <br/><i>work by - <a href=\"https://shehanx86.github.io/\">Shehan bossa</a></i></p>\n\n                       <h4>For Data Lists</h4>\n                    <hr/>\n                    <d1 className=\"row\">\n                    <form>\n                    <p>Type your data set separated with commas. Dont put spaces </p>\n                        <p>eg: <i>12,25,14,2,4 </i>\n                        or <i>12.54,25,1.4,2,4.78</i></p>\n                        <dd className=\"col-sm-3\">Input data set:</dd>\n                        <dd className=\"col-sm-9\"><input type='text' id='dataSet' onChange={this.handleChange}/></dd>\n        \n                        <button className='btn btn-success' disabled={this.state.disabled1} onClick={this.submitHandler}>Get Answers</button>\n                        <br/>\n                        <br/>\n\n                        <dd className=\"col-sm-3\">Your date set in ascending order</dd>\n                        <dd className=\"col-sm-9\">{this.state.list}</dd>\n\n                        <dt className=\"col-sm-3\">Max</dt>\n                        <dd className=\"col-sm-9\">{this.state.max}</dd>\n\n                        <dt className=\"col-sm-3\">Min</dt>\n                        <dd className=\"col-sm-9\">{this.state.min}</dd>\n\n                        <dt className=\"col-sm-3\">Range</dt>\n                        <dd className=\"col-sm-9\">{this.state.range}</dd>\n\n                        <dt className=\"col-sm-3\">Total</dt>\n                        <dd className=\"col-sm-9\">{this.state.total}</dd>\n\n                        <dt className=\"col-sm-3\">Mean</dt>\n                        <dd className=\"col-sm-9\">{this.state.mean}</dd>\n\n                        <dt className=\"col-sm-3\">Q1</dt>\n                        <dd className=\"col-sm-9\">{this.state.Q1}</dd>\n\n                        <dt className=\"col-sm-3\">Q2 (Median)</dt>\n                        <dd className=\"col-sm-9\">{this.state.Q2}</dd>\n\n                        <dt className=\"col-sm-3\">Q3</dt>\n                        <dd className=\"col-sm-9\">{this.state.Q3}</dd>\n\n                        <dt className=\"col-sm-3\">IQR (Q3 - Q1)</dt>\n                        <dd className=\"col-sm-9\">{this.state.Q3 - this.state.Q1}</dd>\n\n                        <dt className=\"col-sm-3\">Upper bound</dt>\n                        <dd className=\"col-sm-9\">{this.state.upperBound}</dd>\n\n                        <dt className=\"col-sm-3\">Lower bound</dt>\n                        <dd className=\"col-sm-9\">{this.state.lowerBound}</dd>\n\n                        <dt className=\"col-sm-3\">Outliers</dt>\n                        <dd className=\"col-sm-9\">{this.state.outliers}</dd>\n\n                        <dt className=\"col-sm-3\">Skeweness</dt>\n                        <dd className=\"col-sm-9\">{this.state.skewness}</dd>\n\n                        <dt className=\"col-sm-3\">Variance (SAMPLE)</dt>\n                        <dd className=\"col-sm-9\">{this.state.sampleVariance}</dd>\n\n                        <dt className=\"col-sm-3\">Standerd deviation (SAMPLE)</dt>\n                        <dd className=\"col-sm-9\">{Math.sqrt(this.state.sampleVariance)}</dd>\n\n                        <dt className=\"col-sm-3\">Variance (POPULATION)</dt>\n                        <dd className=\"col-sm-9\">{this.state.populationVariance}</dd>\n\n                        <dt className=\"col-sm-3\">Standerd deviation (POPULATION)</dt>\n                        <dd className=\"col-sm-9\">{Math.sqrt(this.state.populationVariance)}</dd>\n\n\n                    </form>\n                    </d1>\n\n            </div>\n         );\n    }\n}\n \nexport default Stat;","import React, { Component } from 'react'\r\n\r\nexport default class FrequencyTable extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            dataList: '',\r\n            frequencyList: '',\r\n            dataListArray: [],\r\n            frequencyListArray: [],\r\n            totalFrequency: 0,\r\n            totalData: 0,\r\n            mean: 0,\r\n            sampleVariance: 0,\r\n            populationVariance: 0,\r\n            fx: 0\r\n\r\n        }\r\n    }\r\n\r\n    handleChange1 = (e) =>{\r\n        this.setState({\r\n            dataList: e.target.value,\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    handleChange2 = (e) =>{\r\n        this.setState({\r\n            frequencyList: e.target.value,\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    frequencyListArrayCreate = async () => {\r\n        let temp = new Array();\r\n        let total = 0;\r\n\r\n        temp = this.state.frequencyList.split(\",\");\r\n\r\n        for (var a in temp) {\r\n            temp[a] =  parseFloat(temp[a]);\r\n            total = total + temp[a];\r\n        }\r\n\r\n        this.setState({\r\n            frequencyListArray: temp,\r\n            totalFrequency: total\r\n          });\r\n    }\r\n\r\n    dataListarrayCreate = async () => {\r\n        let temp = new Array();\r\n        let total = 0;\r\n\r\n        temp = this.state.dataList.split(\",\");\r\n\r\n        for (var a in temp) {\r\n            temp[a] =  parseFloat(temp[a])\r\n            total = total + temp[a]\r\n        }\r\n\r\n        this.setState({\r\n            dataListArray: temp,\r\n            totalData: total\r\n          });\r\n    }\r\n\r\n    getMean = async () => {\r\n        await this.dataListarrayCreate();\r\n        await this.frequencyListArrayCreate();\r\n\r\n        let top = 0;\r\n        let mean = 0;\r\n        let totalfx = 0;\r\n\r\n        for(let i = 0; i < this.state.dataListArray.length; i++){\r\n            top += (this.state.dataListArray[i]*this.state.frequencyListArray[i]);\r\n            totalfx += this.state.dataListArray[i]*this.state.frequencyListArray[i]\r\n        }\r\n\r\n        mean = top/this.state.totalFrequency;\r\n\r\n        this.setState({\r\n            mean: mean,\r\n            fx: totalfx\r\n        })\r\n\r\n        return mean;\r\n    }\r\n\r\n    getVariance = async () => {\r\n        let mean = await this.getMean();\r\n        let top = 0;\r\n        let totalFrequency = this.state.totalFrequency;\r\n\r\n        for(let i = 0; i < this.state.dataListArray.length; i++){\r\n            top += ((this.state.dataListArray[i] - mean)*(this.state.dataListArray[i] - mean))*this.state.frequencyListArray[i];\r\n        }\r\n\r\n        console.log(top)\r\n\r\n        let sampleVariance = top/(totalFrequency-1);\r\n        let populationVariance = top/(totalFrequency);\r\n\r\n        this.setState({\r\n            sampleVariance: sampleVariance,\r\n            populationVariance: populationVariance\r\n        })\r\n    }\r\n\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n        this.dataListarrayCreate();\r\n        this.frequencyListArrayCreate();\r\n        this.getVariance();\r\n\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"container\">\r\n                    <h4>For Frequency Table</h4>\r\n                    <hr/>\r\n                    <d1 className=\"row\">\r\n                    <form>\r\n                    <p>Type your data list and frequency list inside relevant input fields respectively, separated with commas. Dont put spaces </p>\r\n                        <p>eg: data list - <i>1,2,3,4,5   </i>\r\n                        frequency list -  <i>6,7,8,9,10</i></p>\r\n                        <dd className=\"col-sm-3\">Input data list:</dd>\r\n                        <dd className=\"col-sm-9\"><input type='text' id='dataList' onChange={this.handleChange1}/></dd>\r\n\r\n                        <dd className=\"col-sm-3\">Input frequency list:</dd>\r\n                        <dd className=\"col-sm-9\"><input type='text' id='frequencyList' onChange={this.handleChange2}/></dd>\r\n                        \r\n                        <button className='btn btn-success' disabled={this.state.disabled} onClick={this.submitHandler}>Get Answers</button>\r\n                        <br/>\r\n                        <br/>\r\n\r\n                        <table class=\"table table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                <th scope=\"col\">x</th>\r\n                                <th scope=\"col\">frequency</th>\r\n                                <th scope=\"col\">fx</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                  \r\n                                {this.state.dataListArray.map((x, i) => (\r\n\r\n                                        <tr key={i}>\r\n                                        <td scope=\"row\">{x}</td>\r\n                                        <td scope=\"row\">{this.state.frequencyListArray[i]}</td>\r\n                                        <th scope=\"row\">{this.state.frequencyListArray[i]*x}</th>\r\n                                        </tr>\r\n                                      \r\n                                  ))} \r\n                                        <tr>\r\n                                        <th scope=\"row\">Σ(x) = {this.state.totalData}</th>\r\n                                        <th scope=\"row\">Σ(f) = {this.state.totalFrequency}</th>\r\n                                        <th scope=\"row\">Σ(fx) = {this.state.fx}</th>\r\n                                        </tr>   \r\n\r\n                            </tbody>\r\n                            </table>\r\n\r\n                        <dt className=\"col-sm-3\">Mean</dt>\r\n                        <dd className=\"col-sm-9\">Σ(fx)/Σ(f) = {this.state.mean}</dd>\r\n                        <br/>\r\n                        <p>If the question does not mention if sample or population, GET SAMPLE VALUES. DEFAULT IS SAMPLE</p>\r\n                        <h3>IF DATA SET IS SAMPLE</h3>\r\n                        <dt className=\"col-sm-3\">Variance</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.sampleVariance}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Standerd deviation</dt>\r\n                        <dd className=\"col-sm-9\">{Math.sqrt(this.state.sampleVariance)}</dd>\r\n                        <br/>\r\n                        \r\n                        <h3>IF DATA SET IS POPULATION</h3>\r\n                        <dt className=\"col-sm-3\">Variance</dt>\r\n                        <dd className=\"col-sm-9\">{this.state.populationVariance}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Standerd deviation</dt>\r\n                        <dd className=\"col-sm-9\">{Math.sqrt(this.state.populationVariance)}</dd>\r\n\r\n                    </form>\r\n                    </d1>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport FrequencyTable from './components/FrequencyTable';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n    <br/>\n    <FrequencyTable/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}